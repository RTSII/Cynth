import React, { useState } from 'react';
import { ArrowRight, ArrowLeft, Check } from 'lucide-react';

// Contexts
import { useUser } from '@/contexts/UserContext';

// Components
import Button from '@/components/ui/Button';

const Onboarding: React.FC = () => {
  const [step, setStep] = useState(1);
  const [name, setName] = useState('Cynthia');
  const [age, setAge] = useState(65);
  const [level, setLevel] = useState<'Novice' | 'Active' | 'Advanced'>('Novice');
  const [healthConditions, setHealthConditions] = useState<string[]>([]);
  const [prefersChairYoga, setPrefersChairYoga] = useState(true);
  const [prefersTaiChi, setPrefersTaiChi] = useState(false);
  const [textSize, setTextSize] = useState<'normal' | 'large' | 'extra-large'>('normal');
  const [highContrast, setHighContrast] = useState(false);
  
  const { updateUserProfile, updatePreferences, completeOnboarding } = useUser();
  
  const handleNextStep = () => {
    if (step < 4) {
      setStep(step + 1);
      window.scrollTo(0, 0);
    }
  };
  
  const handlePreviousStep = () => {
    if (step > 1) {
      setStep(step - 1);
      window.scrollTo(0, 0);
    }
  };
  
  const toggleHealthCondition = (condition: string) => {
    if (healthConditions.includes(condition)) {
      setHealthConditions(healthConditions.filter(c => c !== condition));
    } else {
      setHealthConditions([...healthConditions, condition]);
    }
  };
  
  const handleComplete = async () => {
    try {
      // Update user profile
      await updateUserProfile({
        name,
        age,
        level,
        healthConditions,
        startDate: new Date().toISOString(),
      });
      
      // Update preferences
      await updatePreferences({
        prefersChairYoga,
        prefersTaiChi,
        textSize,
        highContrast,
      });
      
      // Complete onboarding
      await completeOnboarding();
    } catch (error) {
      console.error('Error completing onboarding:', error);
    }
  };
  
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-xl bg-white rounded-xl shadow-lg overflow-hidden">
        {/* Progress Indicator */}
        <div className="w-full bg-gray-200 h-1">
          <div 
            className="bg-primary-500 h-1 transition-all duration-300" 
            style={{ width: `${(step / 4) * 100}%` }}
          ></div>
        </div>
        
        <div className="p-6">
          {/* Step 1: Welcome */}
          {step === 1 && (
            <div className="space-y-6">
              <h1 className="text-2xl font-bold text-gray-900">Welcome to CynthAI</h1>
              <p className="text-gray-600">
                Let's set up your personal chair yoga and tai chi experience. We'll help you
                create a practice that's perfect for you.
              </p>
              
              <div className="space-y-4">
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                    Your Name
                  </label>
                  <input
                    type="text"
                    id="name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  />
                </div>
                
                <div>